#include <iostream>
#include <string>
#include <vector>

/*
Горная цепь состоит из отрезков, соединяющих точки на плоскости, каждая из которых находится 
правее предыдущей (координата x строго возрастает).

Трассой на горной цепи называется маршрут по отрезкам цепи из одной точки в другую. 
Трассы ориентированы — то есть маршрут может быть как слева направо, так и справа налево.

Подъёмом на трассе называется такой отрезок, на котором высота (координата y) возрастает, 
а высотой подъёма — разность высот между начальной и конечной точками отрезка.

Вам даны несколько трасс на одной горной цепи. Помогите для каждой трассы определить суммарную высоту подъёмов.

Формат ввода
В первой строке содержится число N (1≤N≤30000) — количество точек в цепи, задающей горную цепь. Далее в 
N строках содержатся координаты точек — два целых числа 
xi и yi​(1≤xi,yi≤30000, xi≤xi+1).

В следующей строке находится число M — количество трасс (1≤M≤30000).

Далее в M строках содержатся описания трасс. Каждое описание представляет собой два целых числа, 
si и fi (1≤si,fi,≤N) — номера точек начала и конца трассы. Начало и конец трассы могут совпадать.
Точки нумеруются с единицы.

Формат вывода
Для каждой трассы выведите одно число — суммарную высоту подъемов на данной трассе.

Пример 1
Ввод
7
2 1
4 5
7 4
8 2
9 6
11 3
15 3
1
2 6
Вывод
4

Пример 2
Ввод
6
1 1
3 2
5 6
7 2
10 4
11 1
3
5 6
1 4
4 2
Вывод
0
5
4
*/

int main() 
{
    int N; std::cin>>N;
    using Units = long long;
    //using Units = long double;
    std::vector<Units> prefixHf(2,0);
    std::vector<Units> prefixHb(2,0);

    Units x,y;
    std::cin>>x>>y;
  
    for(int i=1; i<N; ++i)
    {
        Units xx,yy;
        std::cin>>xx>>yy;
        if (yy>y)
        {
            prefixHf.push_back(prefixHf.back()+yy-y);
            prefixHb.push_back(prefixHb.back());
        }
        else
        {
            prefixHf.push_back(prefixHf.back());
            prefixHb.push_back(prefixHb.back()+y-yy);
        }
        y = yy;
    }
        
    int M; std::cin>>M;
    for(int i=0; i<M; ++i)
    {
        std::cin>>x>>y;
        if (x<y)
            std::cout<<(prefixHf[y]-prefixHf[x])<<std::endl;
        else 
            std::cout<<(prefixHb[x]-prefixHb[y])<<std::endl;
    }

	return 0;
}